============================== CREATING USER AND ASSIGNING IN ROLE  =============================

	Predefined Roles:
	-----------------
	Role                            Privileges Included
       ---------                     	--------------------
	1) CONNECT			- CREATE SESSION
	2) DBA				- Most system privileges; several other roles,
					  Do not grant to non-dministratiors.
	3) RESOURCE			- CREATE CLUSTER,CREATE INDEXTYPE,
					  CREATE OPERATOR,CREATE PROCEDURE,
					  CREATE SEQUENCE,CREATE TABLE,CREATE TRIGGER
					  CREATE TYPE
	4) SCHEDULET_ADMIN		- CREATE ANY JOB,CREATE EXTERNAL JOB,CREATE JOB
					  EXECUTE ANY CLASS,EXECUTE ANY PROGRAM,
					  MANAGE SCHEDULER
	5) SELECT_CATALOG_ROLE		- SELECT provileges on data dictionary objects.
	-------------------------------------------------------------------------------
	grant dba to "user name"; // that provide all Predefined Role privileges
	-------------------------------------------------------------------------------

SQL> desc dba_users;			//users table
SQL> select username from dba_users;	//show users
SQL> desc dba_role_privs;
SQL> select * from dba_role_privs where granted_role='DBA';


SQL> create user ashiq identified by ashiq;
User created.
----------------------
SQL> conn ashiq/ashiq;
ERROR:
ORA-01045: user ASHIQ lacks CREATE SESSION privilege; logon denied

Warning: You are no longer connected to ORACLE.
-------------------------
SQL> conn sys/sys123@dba150 as sysdba
SQL> grant CREATE SESSION to ashiq;
Grant succeeded.
SQL> conn ashiq/ashiq;
Connected.
SQL> create table test(id number,name varchar2(25));
create table test(id number,name varchar2(25))
*
ERROR at line 1:
ORA-01031: insufficient privileges
----------------------------
SQL> conn sys/sys123@dba150 as sysdba
Connected.
SQL> grant RESOURCE to ashiq // here i am giving role privillage
Grant succeeded.
----------------------------
SQL> conn ashiq/ashiq;
Connected.
SQL> create table test(id number,name varchar2(25));
Table created.
SQL> select * from tab;

================================ CREATING USER PROFILE ================================

ORA12C VERIFY FUNCTION (PROFILE FUNCTION)
=========================================
FUNCTION LOCATIONS:
utlpwdmg.sql script:

D:\app\Administrator\product\12.2.0\dbhome_1\rdbms\admin\utlpwdmg.sql
=========================================

As a SYS user:

verify_function_12c_DBA150

create or replace FUNCTION verify_function_12c_DBA150
(username varchar2,
 password varchar2,
 old_password varchar2)
RETURN boolean 
IS
   differ            integer;
   db_name           varchar2(40);
   i                 integer;
   i_char            varchar2(10);
   simple_password   varchar2(10);
   reverse_user      dbms_id;
   canon_username    dbms_id := username;
BEGIN
   -- Bug 22369990: Dbms_Utility may not be available at this point, so switch
   -- to dynamic SQL to execute canonicalize procedure.
   IF (substr(username,1,1) = '"') THEN
     execute immediate 'begin dbms_utility.canonicalize(:p1,  :p2, 128); end;'
                        using IN username, OUT canon_username;
   END IF;
   IF NOT ora_complexity_check(password, chars => 3, letter => 1, digit => 1) THEN
      RETURN(FALSE);
   END IF;

   -- Check if the password is same as the username or username(1-100)
   IF NLS_LOWER(password) = NLS_LOWER(canon_username) THEN
     raise_application_error(-20002, 'Password same as or similar to user');
   END IF;
   FOR i IN 1..100 LOOP
      i_char := to_char(i);
      if NLS_LOWER(canon_username)|| i_char = NLS_LOWER(password) THEN
        raise_application_error(-20005, 'Password same as or similar to ' ||
                                        'username ');
      END IF;
   END LOOP;

   -- Check if the password is same as the username reversed
   FOR i in REVERSE 1..length(canon_username) LOOP
     reverse_user := reverse_user || substr(canon_username, i, 1);
   END LOOP;
   IF NLS_LOWER(password) = NLS_LOWER(reverse_user) THEN
     raise_application_error(-20003, 'Password same as username reversed');
   END IF;

   -- Check if the password is the same as server name and or servername(1-100)
   select name into db_name from sys.v$database;
   if NLS_LOWER(db_name) = NLS_LOWER(password) THEN
      raise_application_error(-20004, 'Password same as or similar ' ||
                                      'to server name');
   END IF;
   FOR i IN 1..100 LOOP
      i_char := to_char(i);
      if NLS_LOWER(db_name)|| i_char = NLS_LOWER(password) THEN
        raise_application_error(-20005, 'Password same as or similar ' ||
                                        'to server name ');
      END IF;
   END LOOP;

   -- Check if the password is too simple. A dictionary of words may be
   -- maintained and a check may be made so as not to allow the words
   -- that are too simple for the password.
   IF NLS_LOWER(password) IN ('shajal1','welcome1', 'database1', 'account1', 'user1234',
                              'password1', 'oracle123', 'computer1',
                              'abcdefg1', 'change_on_install') THEN
      raise_application_error(-20006, 'Vahi! Ai Password deowa Jabe na');
   END IF;

   -- Check if the password is the same as oracle (1-100)
    simple_password := 'oracle';
    FOR i IN 1..100 LOOP
      i_char := to_char(i);
      if simple_password || i_char = NLS_LOWER(password) THEN
        raise_application_error(-20006, 'Password too simple ');
      END IF;
    END LOOP;

   -- Check if the password differs from the previous password by at least
   -- 3 letters
   IF old_password IS NOT NULL THEN
     differ := ora_string_distance(old_password, password);
     IF differ < 3 THEN
         raise_application_error(-20011, 'Password should differ from the ' ||
                                 'old password by at least 3 characters');
     END IF;
   END IF;

   RETURN(TRUE);
END verify_function_12c_DBA150;
/
--------------------------------------------------------------
desc     dba_profiles;

select   distinct profile
from     dba_profiles
order by PROFILE;

select   distinct profile,RESOURCE_NAME,RESOURCE_TYPE,LIMIT,COMMON,INHERITED,IMPLICIT
from     dba_profiles
order by PROFILE;

select   * 
from     dba_profiles
order by PROFILE;
-------------------------------------------------------------------
select   distinct profile
from     dba_profiles
order by PROFILE;

USER PROFILE CREATION: (Altering Default profile)
=================================================
ALTER PROFILE "DEFAULT" LIMIT
CPU_PER_SESSION UNLIMITED
CPU_PER_CALL UNLIMITED
CONNECT_TIME UNLIMITED
IDLE_TIME UNLIMITED
SESSIONS_PER_USER UNLIMITED
LOGICAL_READS_PER_SESSION UNLIMITED
LOGICAL_READS_PER_CALL UNLIMITED
PRIVATE_SGA UNLIMITED
COMPOSITE_LIMIT UNLIMITED
PASSWORD_LIFE_TIME 180
PASSWORD_GRACE_TIME 7
PASSWORD_REUSE_MAX UNLIMITED
PASSWORD_REUSE_TIME UNLIMITED
PASSWORD_LOCK_TIME 1
FAILED_LOGIN_ATTEMPTS 10
PASSWORD_VERIFY_FUNCTION verify_function_12c_DBA150;
---------

SQL> CREATE USER SHAJAL1 
   IDENTIFIED BY Shajal12
   QUOTA 10M ON USERS;
CREATE USER SHAJAL1
*
ERROR at line 1:
ORA-28003: password verification for the specified password failed
ORA-20022: Password must contain at least 1 letter(s)

-----------

SQL> CREATE USER SHAJAL1
  2     IDENTIFIED BY Shajal12
  3     QUOTA 10M ON USERS;
CREATE USER SHAJAL1
*
ERROR at line 1:
ORA-28003: password verification for the specified password failed
ORA-20005: Password same as or similar to username

--------------

SQL> CREATE USER diu
  2     IDENTIFIED BY Diu123
  3     QUOTA 10M ON USERS;

User created.
----------------------------------------- D O N E ! ! ! ----------------------------------


















				